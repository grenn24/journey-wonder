
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log;
    #error_log /var/log/nginx/error.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen 80;
        server_name journey-wonder.com www.journey-wonder.com;
        # Redirect HTTP requests to HTTPS
        return 301 https://journey-wonder.com$request_uri;
    }       

    server {
        listen 443 ssl;
        server_name www.journey-wonder.com;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        return 301 https://journey-wonder.com$request_uri;
    }


    server {
        listen       443 ssl;
        server_name journey-wonder.com;
        client_max_body_size 100M;

        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key  /etc/nginx/ssl/privkey.pem;
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        # Serve frontend static files
        location / {
            if ($http_origin ~* ^https?://(www\.)?journey-wonder\.com$) {
                set $allowed_origin $http_origin;
            }
            add_header 'Access-Control-Allow-Origin' $allowed_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Access-Token' always;
            add_header 'Access-Control-Expose-Headers' 'X-Access-Token' always;
            add_header 'Access-Control-Max-Age' '1728000' always;

            root   /usr/share/nginx/html/journey-wonder;
            try_files $uri /index.html;
            # Preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Api requests
        location /api/ {
            if ($http_origin ~* ^https?://(www\.)?journey-wonder\.com$) {
                set $allowed_origin $http_origin;
            }
            add_header 'Access-Control-Allow-Origin' $allowed_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Access-Token' always;
            add_header 'Access-Control-Expose-Headers' 'X-Access-Token' always;
            add_header 'Access-Control-Max-Age' '1728000' always;

            allow all;  # Local access (Nginx ipv4 docker address)
            deny all;  # No point denying if nginx is the only container connected to public port
	        proxy_pass http://root-backend-1:3000;  # Backend server
	        proxy_http_version 1.1;             
	        proxy_set_header Upgrade $http_upgrade;         
	        proxy_set_header Connection 'upgrade';
	        proxy_set_header Host $host;        
	        proxy_cache_bypass $http_upgrade; 
            # Preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Serve acme challenge files
        location /.well-known/acme-challenge/ {
            root   /usr/share/nginx/html;
            # Preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Search Engine Optimisation files
        location = /robots.txt {
            root /usr/share/nginx/html/seo;
        }
        location = /sitemap.xml {
            root /usr/share/nginx/html/seo;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
        
        #location = /index.html {
        #    root   /usr/share/nginx/html;
        #}

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
